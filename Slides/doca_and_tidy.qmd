---
title: "DOCA and tidyverse"
editor: visual
format:
  html:
    df-print: paged
    toc: true
    toc-location: left
    toc-depth: 4
    smaller: true
    self-contained: true
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)

```

## Loading Data

```{r, echo=FALSE}

# downloading DOCA from a URL if it isn't already available in the current directory

if(!file.exists('./final_data_v10.dta')){
  download.file('http://www.stanford.edu/group/collectiveaction/final_data_v10.dta', dest='./final_data_v10.dta', mode='wb')
}



```

We'll be making extensive use of [tidyverse packages](https://www.tidyverse.org/packages/) in this course. These packages are designed with a shared set of rules in mind and so it can simplify a lot of complicated data analysis problems that would otherwise require you to write a lot of R code.

If you don't have it already, you'll want to start by installing the tidyverse packages:

```{r, eval=FALSE}

install.packages("tidyverse")
```

Remember that you'll only need to install a package once, but you'll need to run `library(packagename)` at the top of your script every time your restart R in order to use any functions from that package. The code below will load both the tidyverse core packages and also the haven package, which we will use to read in data sets from other coding languages.

```{r}

library(tidyverse)
library(haven)


```

Once you have the DOCA data downloaded, you'll need to import it into R and assign it to a variable. Since this data set uses .dta format, we'll read it in using the `read_dta` function from the haven package.

We'll also run `doca<-as_factor(doca)` to convert some Stata formatted information into something that R can recognize.

```{r}

doca<-read_dta('final_data_v10.dta')
doca<-as_factor(doca)

```

If you're using Rstudio, you should see `doca` pop up in the window at the top-right of your screen. If you click on the name, you can bring up a view of the data set. Alternatively, you can use the `slice_head` function to view the first few rows in the console.

```{r}

slice_head(doca, n = 10)

```

### Using the codebook

When browsing the data, you'll probably notice that some columns are self-explanatory, but other columns are a little harder to parse: columns names like `particex` don't have an obvious interpretation.

Data that we work with in this class will not always come with clear variable names or value labels, so you'll need to consult the [codebook](https://web.stanford.edu/group/collectiveaction/cgi-bin/drupal/node/17) and [additional documentation](https://web.stanford.edu/group/collectiveaction/cgi-bin/drupal/node/3) for the data set.

#### Question 1

**Which column contains the year the event occurred? How would I access its values?**

```{r q1}
# Q1

```

## Using pipes

The `|>` operator (or sometimes `%>%`) is a way of making code a little more readable and less repetitive by "piping" data from one function to the next. For instance, if I wanted to find the earliest event in the DOCA data, I could use the `min` function like this:

```{r}

min(doca$evyy, na.rm=T)

```

Or I could rewrite this statement by piping the data forward like this:

```{r}

doca$evyy|>min(na.rm=T)

```

This might seem kind of pointless in the current example, but the real advantage becomes more clear when you're doing a bunch of different things to a bit of data. For instance, if I wanted to calculate the proportion of violent and non-violent protest in 1980 I would need to do the following:

1.  Get the subset of the data where `evyy` (event year) is 1980)
2.  Select the `viold` column (which is `TRUE` if the protest was violent and `FALSE` otherwise
3.  Create a frequency table using the `table` command
4.  Convert the frequencies to proportions using `prop.table`

I could do all these steps in one line with a series of nested parentheses, but writing the code that way is hard to read:

```{r}

prop.table(table(subset(doca, evyy == 1980, select = viold)))

```

Here's how I could rewrite that using pipes:

```{r}
doca|>
  subset(evyy==1980, select=viold)|>
  table()|>
  prop.table()

```

You're not required to use this, and there's never going to be a case where you can only write a particular piece of code by using a pipe. However you will see it come up a fair bit in code I share with the class and other written guides on using tidyverse packages, so at a bare minimum you want to know how to interpret it.

## Filtering

We'll often want to remove rows that match a condition from a data set entirely. For instance: there's a single protest even in the DOCA data set that takes place in 1955. There's a reason for this in the coding rules, but in practice it makes for a lot of nonsensical plots, so we usually just want to remove it before doing anything.

The `subset` function is a way to do this in base R, but I'll often use the `filter` function to accomplish the same thing (mostly out of habit). We can give filter a logical expression and it will keep only rows where that expression is `TRUE`

```{r}

# keep only rows that are after 1955
doca<-doca|>
  filter(evyy > 1955)

# now the minimum year should be 1960
min(doca$evyy, na.rm=T)

```

Keep in mind that a filter removes rows from the data set, so you want to be careful that you're not throwing away information you might want to use elsewhere in your analysis. If you just want to temporarily get a subset of some data, you can always just assign your results to a new variable:

```{r assigning results to a new variable}

# create a new variable with only the 1980 results
doca_1980<-doca|>
  filter(evyy == 1980)

# check the number of rows remaining: 
nrow(doca_1980)
```

#### Question 2

How would I create a data set containing only the events where police were killed?

```{r q2}
#Q2


```

## Counting observations

Since many social science variables are categorical, many of our analyses will involve counting the number of observations with a particular value. We can use the `table` function to get counts of a particular category for some quick analysis, but we'll also use the `dplyr` function `count` or `summarize` to get the same result.

### Using table

For instance, if we want to create a table with a count of events in each state, we could run:

```{r}

# count the number of events per state
state_tab<-table(doca$state1)

# View the results
state_tab
```

We could sort this from highest to lowest using the `sort` function with the `decreasing=T` option. (the default will sort from highest to lowest, but this will give us values from lowest to highest)

```{r}

sort(state_tab, decreasing=T)

```

And we can use the `[]` operator to get a subset of the data. This code translates as "sort the data from highest to lowest, and then show the 1st through the 10th value":

```{r}
sorted_tab <- sort(state_tab, decreasing=T)

sorted_tab[1:10]
```

Finally, I can convert the raw frequencies to proportions by using the `prop.table` function

```{r}

prop.table(sorted_tab)[1:10]

```

Why are there so many more New York events? Does this real differences in protest activity or is there some other explanation?

### Using count

The `table` function works for quick analyses, but we'll often use the dplyr `count` function instead. There are some subtle differences in how these work that will matter in the future, but for now, just note that we can get the same basic output that we got in the last step like this:

```{r}
doca|>
  # count the number of events by state and sort
  count(state1, sort=T)|>
  # show the top 10 rows
  slice_head(n=10)


```

To calculate a proportion, I'll need to divide `n` (the count of events per state) by the total number of events (the sum of `n`). I can use `mutate` to add a new column to a data set:

```{r}

state_proportions <- doca|>
  # count the number of events by state and sort
  count(state1, sort=T)|>
  # use mutate to add a new column 
  mutate(proportion = n/sum(n))


```

#### Question 3

**How would I calculate the number of events per year using the count function? How would I calculate this for violent protests only?**

```{r q3}
#


```

## Making comparisons

When making inferences, we often need to make a comparison across one or more groups. For instance, if someone argued that "protests where counter demonstrators were present were more likely to become violent compared to protests without them", then I would want to:

1.  count the number of events with and without counter demonstrators
2.  calculate the proportion of events in each group that were violent vs. non-violent.

We can easily add another variable to the count function like this (and we can use the `drop_na` function to remove missing data)

```{r}

vc_count<-doca|>
  count(counterd, viold)|>
  # remove rows with missing data:
  drop_na()


vc_count

```

... but how do we accomplish step 2 and calculate the proportions within each group? The code we used earlier doesn't quite give us what we want because it divides each count by the total number of protest events. But we actually want the proportion of violent protests among protests with counter-demonstrators and those without.

```{r}
vc_count|>
  # count the number of events by state and sort
  # use mutate to add a new column 
  mutate(proportion = n/sum(n))

```

To do get this, we can use the `group_by` function to group rows together based on a characteristic. On its own, `group_by` doesn't do much, but when we use it with `mutate`, we get a different result:

```{r}

proportion_by_group<-vc_count|>
  group_by(counterd)|>
  mutate(proportion = n /sum(n))

proportion_by_group
```

Based on these results, we should be able to tell whether events with counter-demonstrators were more likely to turn violent.

```{r}



```

#### Question 4

`propdam` is a dummy variable that indicates whether property damage occurred at an event. `smonamed` is a dummy variable that indicates whether a social movement organization was involved in the event. Is property damage more or less likely at events where a social movement organization was involved?

```{r q4}
#


```

## Renaming a factor

Most of the variables in this data set are given numeric codes that don't make sense without consulting the codebook. This is fine for quick analysis, but when we're presenting data, we may want to assign descriptive labels instead of using the numeric code. We can use the `case_when` statement to create new variables based on conditions.

The basic syntax here will be `case_when(variable == somevalue ~ "label")` . Which you can interpret as "if the statement is true, then assign this label.

Here's an example of how we could do this to make the violence variable have a more useful label:

```{r}

doca<-doca|>
  mutate(violence = case_when(viold ==1 ~ "violence used", 
                              viold == 0 ~ "no violence used"
                              ))

doca|>
  count(violence)|>
  drop_na()

```

#### Question 5

**How would I recode the counter demonstrators variable to have a more descriptive label?**

```{r}
# Q5
  

```

## Plotting a result

You can use `ggplot` to create graphics from the data we've assembled here.

We'll get more into the mechanics of using `ggplot` in a later class, but just to get a basic sense of how this will work, here's an example of how you could plot the number of events by year:

```{r}

yearly_events<-doca|>
  count(evyy)

# date, aes(x=, y=) and then add geometry:
ggplot(yearly_events, aes(x=evyy, y=n)) + 
  geom_line() +
  xlab("Year") +
  ylab("Total events")


```

The advantages of ggplot will become more apparent when we start doing things like plotting multiple variables in the same plot. Here's an example of plotting violent and non-violent events separately:

```{r}

yearly_events<-doca|>
  count(evyy, violence)|>
  drop_na()

# date, aes(x=, y=) and then add geometry:
ggplot(yearly_events, aes(x=evyy, y=n, color=violence)) + 
  geom_line() +
  xlab("Year") +
  ylab("Total events")

```

# Function reference

## slice\_\*

`slice_head`, (and `slice_tail`, `slice_min`, and `slice_max`) will extract a subset of a data set. Slice head just gets the first `n` rows:

```{r}

doca|>
  slice_head(n=5)


```

## \|\> (pipes)

`|>` or the "pipe operator" will take data from the left hand side and "pipe" it to a function on the right hand side. For instance:

```{r}
nrow(doca)

```

...can be expressed as:

```{r}
doca|>nrow()

```

## filter

`filter` will take a logical expression and return rows where that expression evaluates as `TRUE`

```{r}

doca|>
  filter(eventid == '6001009')


```

## count

`count` will count the number of rows based on one or more groups. (this works very similarly to `table` but it returns a `tibble` object).

```{r}
# counting violent events
doca|>
  count(viold)

```

You can set the `sort` option to TRUE to sort all of the counts from lowest to highest

```{r}

doca|>
  count(viold, sort=TRUE)

```

## arrange

`arrange` will filter rows of a data set by some value. Using a `-` in front of a variable name will sort from highest to lowest instead of lowest to highest:

```{r}

doca|>
  # sort from highest to lowest
  arrange(-evyy)|>
  # take the top 10 rows
  slice_head(n=10)

```

## mutate

`mutate` will add a new column to a data set. We used it in a prior example to add a total or a proportion to the data set returned from the `count` function:

```{r}

doca|>
  count(state1)|>
  mutate(total_events = sum(n))

```

## group_by

`group_by` is used to create a grouped data frame. On its own, this doesn't do much, but functions like `mutate` and `slice_head` and `summarize` will allow us to do calculations over groups instead of operating on the entire data set.

For example the code below gets the first event in each year:

```{r}

# get the first listed event in each year: 
doca|>
  group_by(evyy)|>
  slice_head(n=1)

```
